import { CompanyRepository } from './company.repository';
import { UsersServices } from '../users/users.service';
import { CompanyEntity, CompanyImageEntity, TripFeeType } from '../entities';
import { ImageRepository } from './image.repository';
import { ElasticsearchService } from '../elasticsearch/elasticsearch.service';
import { DisponibilityRepository } from '../disponibility/disponibility.repository';
export declare class CompanyServices {
    private readonly companyRepository;
    private readonly disponibilityRepository;
    private readonly imageRepository;
    private elasticsearchService;
    private readonly usersServices;
    constructor(companyRepository: CompanyRepository, disponibilityRepository: DisponibilityRepository, imageRepository: ImageRepository, elasticsearchService: ElasticsearchService, usersServices: UsersServices);
    createCompany(email: string, company: CompanyEntity): Promise<CompanyEntity>;
    deleteImage(id: any, imageId: any): Promise<CompanyImageEntity>;
    deleteCompany(id: any): Promise<CompanyEntity>;
    deleteJobs(id: any): Promise<void>;
    getCompany(email: any): Promise<{
        disponibility: import("../entities/disponibility.entity").DisponibilityEntity[];
        id: string;
        name: string;
        description: string;
        weekendVariation: boolean;
        weekendVariationPercentage: number;
        periodeVariation: boolean;
        optionsProposed: boolean;
        suppHours: boolean;
        suppHoursRate: number;
        tripExpences: boolean;
        tripExpencesDistance: number;
        tripExpencesRateType: TripFeeType;
        tripExpencesTypePrice: number;
        currentStep: string;
        categories: string[];
        links: string[];
        questions: object;
        location: {
            address: string;
            lat: number;
            lng: number;
        };
        dynamiqueQts: {
            label: string;
            response: string;
        }[];
        images: CompanyImageEntity[];
        settings: import("../entities").SettingEntity[];
        options: import("../entities").OptionEntity[];
        billing: import("../entities").CompanyBillingEntity;
        updatedAt: Date;
        createdAt: Date;
        user: import("../entities").ProviderEntity;
        reservations: import("../entities/reservation.entity").ReservationEntity[];
        networks?: string[];
        comments: import("../entities/comments.entity").CommentsEntity[];
        countVotes: number;
        totalNotes: number;
        qualiteService: number;
        countQualiteService: number;
        professionnalisme: number;
        countProfessionnalisme: number;
        flexibilite: number;
        countFlexibilite: number;
        rapportQualitePrix: number;
        countRapportQualitePrix: number;
        securePayment: boolean;
        favorites: import("../entities").UserFavoriteEntity[];
    }>;
    findCompany(id: string, email: string): Promise<CompanyEntity>;
    patchCategory(id: any, company: Partial<CompanyEntity>): Promise<import("typeorm").UpdateResult>;
    patchCurrentStep(id: any, company: Partial<CompanyEntity>): Promise<import("typeorm").UpdateResult>;
    patchCompanyImage(email: string, id: any, imageId: any, data: Partial<CompanyImageEntity>): Promise<CompanyImageEntity[]>;
    patchCompany(id: any, company: Partial<CompanyEntity>, userId: string): Promise<CompanyEntity>;
    findCompanyByUserId(userId: string): Promise<{
        disponibility: any;
        id: string;
        name: string;
        description: string;
        weekendVariation: boolean;
        weekendVariationPercentage: number;
        periodeVariation: boolean;
        optionsProposed: boolean;
        suppHours: boolean;
        suppHoursRate: number;
        tripExpences: boolean;
        tripExpencesDistance: number;
        tripExpencesRateType: TripFeeType;
        tripExpencesTypePrice: number;
        currentStep: string;
        categories: string[];
        links: string[];
        questions: object;
        location: {
            address: string;
            lat: number;
            lng: number;
        };
        dynamiqueQts: {
            label: string;
            response: string;
        }[];
        images: CompanyImageEntity[];
        settings: import("../entities").SettingEntity[];
        options: import("../entities").OptionEntity[];
        billing: import("../entities").CompanyBillingEntity;
        updatedAt: Date;
        createdAt: Date;
        user: import("../entities").ProviderEntity;
        reservations: import("../entities/reservation.entity").ReservationEntity[];
        networks?: string[];
        comments: import("../entities/comments.entity").CommentsEntity[];
        countVotes: number;
        totalNotes: number;
        qualiteService: number;
        countQualiteService: number;
        professionnalisme: number;
        countProfessionnalisme: number;
        flexibilite: number;
        countFlexibilite: number;
        rapportQualitePrix: number;
        countRapportQualitePrix: number;
        securePayment: boolean;
        favorites: import("../entities").UserFavoriteEntity[];
    }>;
}
