import { CompanyEntity, CompanyImageEntity } from '../../infrastructure/databases/entities';
import { CompanyServices } from '../../infrastructure/databases/company/company.service';
import { ServicesService } from '../services/services.service';
import { UsersServices } from '../../infrastructure/databases/users/users.service';
import { GcpFileService } from '../../global/services/gcp-file/gcp-file.service';
export declare class CompanyService {
    private readonly companyServices;
    private readonly servicesService;
    private readonly usersService;
    private readonly gcpFileService;
    constructor(companyServices: CompanyServices, servicesService: ServicesService, usersService: UsersServices, gcpFileService: GcpFileService);
    static fileFilter(req1: any, file: any, callback: any): any;
    static filename(req: any, file: any, cb: any): any;
    createCompany(email: string, data: {
        files: any[];
        company: any;
    }): Promise<CompanyEntity>;
    deleteImage(id: any, imageId: any): Promise<CompanyImageEntity>;
    deleteCompany(id: any): Promise<CompanyEntity>;
    deleteJobs(id: any): Promise<void>;
    createJobs(company: any, email: string): Promise<void>;
    getCompany(email: string): Promise<{
        disponibility: import("../../infrastructure/databases/entities/disponibility.entity").DisponibilityEntity[];
        id: string;
        name: string;
        description: string;
        weekendVariation: boolean;
        weekendVariationPercentage: number;
        periodeVariation: boolean;
        optionsProposed: boolean;
        suppHours: boolean;
        suppHoursRate: number;
        tripExpences: boolean;
        tripExpencesDistance: number;
        tripExpencesRateType: import("../../infrastructure/databases/entities").TripFeeType;
        tripExpencesTypePrice: number;
        currentStep: string;
        categories: string[];
        links: string[];
        questions: object;
        location: {
            address: string;
            lat: number;
            lng: number;
        };
        dynamiqueQts: {
            label: string;
            response: string;
        }[];
        images: CompanyImageEntity[];
        settings: import("../../infrastructure/databases/entities").SettingEntity[];
        options: import("../../infrastructure/databases/entities").OptionEntity[];
        billing: import("../../infrastructure/databases/entities").CompanyBillingEntity;
        updatedAt: Date;
        createdAt: Date;
        user: import("../../infrastructure/databases/entities").ProviderEntity;
        reservations: import("../../infrastructure/databases/entities/reservation.entity").ReservationEntity[];
        networks?: string[];
        comments: import("../../infrastructure/databases/entities/comments.entity").CommentsEntity[];
        countVotes: number;
        totalNotes: number;
        qualiteService: number;
        countQualiteService: number;
        professionnalisme: number;
        countProfessionnalisme: number;
        flexibilite: number;
        countFlexibilite: number;
        rapportQualitePrix: number;
        countRapportQualitePrix: number;
        securePayment: boolean;
        favorites: import("../../infrastructure/databases/entities").UserFavoriteEntity[];
    }>;
    findCompanyByUserId(userId: string): Promise<{
        disponibility: any;
        id: string;
        name: string;
        description: string;
        weekendVariation: boolean;
        weekendVariationPercentage: number;
        periodeVariation: boolean;
        optionsProposed: boolean;
        suppHours: boolean;
        suppHoursRate: number;
        tripExpences: boolean;
        tripExpencesDistance: number;
        tripExpencesRateType: import("../../infrastructure/databases/entities").TripFeeType;
        tripExpencesTypePrice: number;
        currentStep: string;
        categories: string[];
        links: string[];
        questions: object;
        location: {
            address: string;
            lat: number;
            lng: number;
        };
        dynamiqueQts: {
            label: string;
            response: string;
        }[];
        images: CompanyImageEntity[];
        settings: import("../../infrastructure/databases/entities").SettingEntity[];
        options: import("../../infrastructure/databases/entities").OptionEntity[];
        billing: import("../../infrastructure/databases/entities").CompanyBillingEntity;
        updatedAt: Date;
        createdAt: Date;
        user: import("../../infrastructure/databases/entities").ProviderEntity;
        reservations: import("../../infrastructure/databases/entities/reservation.entity").ReservationEntity[];
        networks?: string[];
        comments: import("../../infrastructure/databases/entities/comments.entity").CommentsEntity[];
        countVotes: number;
        totalNotes: number;
        qualiteService: number;
        countQualiteService: number;
        professionnalisme: number;
        countProfessionnalisme: number;
        flexibilite: number;
        countFlexibilite: number;
        rapportQualitePrix: number;
        countRapportQualitePrix: number;
        securePayment: boolean;
        favorites: import("../../infrastructure/databases/entities").UserFavoriteEntity[];
    }>;
    findCompany(id: string, email: string): Promise<CompanyEntity>;
    changeFavorite(email: string, id: any, imageId: any, data: Partial<CompanyImageEntity>): Promise<CompanyImageEntity[]>;
    patchCompany(id: any, email: any, company: Partial<CompanyEntity>, files: any[], userId: string): Promise<CompanyEntity>;
    patchCategories(id: any, company: Partial<CompanyEntity>): Promise<import("typeorm").UpdateResult>;
    patchCurrentStep(id: any, company: Partial<CompanyEntity>): Promise<import("typeorm").UpdateResult>;
    private transformCriteres;
    private getCategorieByLabel;
    private asyncForEach;
}
